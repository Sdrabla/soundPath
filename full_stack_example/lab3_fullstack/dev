#!/usr/bin/env bash
set -euo pipefail

CMD="${1:-help}"
BASE_URL="${BACKEND_URL:-http://localhost:8000}"
FRONTEND_URL="${FRONTEND_URL:-http://localhost:5173}"

pretty() {
  if command -v jq >/dev/null 2>&1; then jq .
  elif command -v python3 >/dev/null 2>&1; then python3 -m json.tool
  elif command -v python  >/dev/null 2>&1; then python  -m json.tool
  else cat; fi
}

is_wsl() { grep -qi microsoft /proc/version 2>/dev/null; }
is_msys() {
  case "${MSYSTEM:-$(uname -s)}" in
    MINGW*|MSYS*|CYGWIN*) return 0;;
    *) return 1;;
  esac
}

wait_http() {
  local url="$1"; local tries="${2:-60}"
  for _ in $(seq 1 "$tries"); do
    if curl -fsS "$url" -o /dev/null >/dev/null 2>&1; then return 0; fi
    sleep 1
  done
  return 1
}

open_browser() {
  echo "[INFO] Opening $FRONTEND_URL ..."

  # --- Git Bash / MSYS on Windows ---
  if is_msys; then
    if command -v powershell.exe >/dev/null 2>&1; then
      (powershell.exe -NoLogo -NoProfile -Command "Start-Process '$FRONTEND_URL'" >/dev/null 2>&1 &) && return 0
    fi
    if command -v cmd.exe >/dev/null 2>&1; then
      (cmd.exe /C start "" "$FRONTEND_URL" >/dev/null 2>&1 &) && return 0
    fi
    if [ -x "/c/Windows/explorer.exe" ]; then
      (/c/Windows/explorer.exe "$FRONTEND_URL" >/dev/null 2>&1 &) && return 0
    fi
    if command -v rundll32.exe >/dev/null 2>&1; then
      (rundll32.exe url.dll,FileProtocolHandler "$FRONTEND_URL" >/dev/null 2>&1 &) && return 0
    fi
  fi

  # --- WSL ---
  if is_wsl; then
    if command -v wslview >/dev/null 2>&1; then
      (wslview "$FRONTEND_URL" >/dev/null 2>&1 &) && return 0
    fi
    if command -v powershell.exe >/dev/null 2>&1; then
      (powershell.exe -NoLogo -NoProfile -Command "Start-Process '$FRONTEND_URL'" >/dev/null 2>&1 &) && return 0
    fi
    if command -v cmd.exe >/dev/null 2>&1; then
      (cmd.exe /C start "" "$FRONTEND_URL" >/dev/null 2>&1 &) && return 0
    fi
  fi

  # --- Linux / macOS ---
  if command -v xdg-open >/dev/null 2>&1; then (xdg-open "$FRONTEND_URL" >/dev/null 2>&1 &) && return 0; fi
  if command -v open     >/dev/null 2>&1; then (open "$FRONTEND_URL"      >/dev/null 2>&1 &) && return 0; fi

  echo "[WARN] Could not auto-open. Please open: $FRONTEND_URL"
}

case "$CMD" in
  up)
    docker compose up -d --build
    # Wait for backend first (so frontend proxy/API calls won't race)
    wait_http "$BASE_URL/ping" 60  || echo "[WARN] Backend not reachable yet: $BASE_URL"
    wait_http "$FRONTEND_URL"  60  || echo "[WARN] Frontend not reachable yet: $FRONTEND_URL"
    open_browser
    ;;

  restart)
    docker compose down
    docker compose up -d --build
    wait_http "$BASE_URL/ping" 60  || echo "[WARN] Backend not reachable yet: $BASE_URL"
    wait_http "$FRONTEND_URL"  60  || echo "[WARN] Frontend not reachable yet: $FRONTEND_URL"
    open_browser
    ;;

  build)
    docker compose build
    ;;

  down)
    docker compose down
    ;;

  clean)
    docker compose down -v
    ;;

  logs)
    docker compose logs -f
    ;;

  ps)
    docker compose ps
    ;;

  ping)
    curl -s "$BASE_URL/ping" | pretty
    ;;

  books)
    curl -s "$BASE_URL/books" | pretty
    ;;

  create)
    # Usage:
    #   ./dev create "Title" "Author" [Year] [Genre] [Image] [Review]
    #   or: TITLE="Title" AUTHOR="Author" YEAR=2008 GENRE="Fantasy" IMAGE="url" REVIEW="text" ./dev create
    TITLE_ARG="${2-}"; AUTHOR_ARG="${3-}"; YEAR_ARG="${4-}"; GENRE_ARG="${5-}"; IMAGE_ARG="${6-}"; REVIEW_ARG="${7-}"
    TITLE="${TITLE:-${TITLE_ARG:-}}"
    AUTHOR="${AUTHOR:-${AUTHOR_ARG:-}}"
    YEAR="${YEAR:-${YEAR_ARG:-}}"
    GENRE="${GENRE:-${GENRE_ARG:-}}"
    IMAGE="${IMAGE:-${IMAGE_ARG:-}}"
    REVIEW="${REVIEW:-${REVIEW_ARG:-}}"
    
    if [[ -z "${TITLE}" || -z "${AUTHOR}" ]]; then
      echo 'Usage: ./dev create "Title" "Author" [Year] [Genre] [Image] [Review]'
      echo '   or: TITLE="Title" AUTHOR="Author" [YEAR=2008] [GENRE="Fantasy"] [IMAGE="url"] [REVIEW="text"] ./dev create'
      exit 2
    fi
    
    # Build JSON dynamically
    JSON='{"title":"'$TITLE'","author":"'$AUTHOR'"'
    [[ -n "${YEAR}" ]] && JSON+=',\"year\":'$YEAR
    [[ -n "${GENRE}" ]] && JSON+=',\"genre\":\"'$GENRE'\"'
    [[ -n "${IMAGE}" ]] && JSON+=',\"image\":\"'$IMAGE'\"'
    [[ -n "${REVIEW}" ]] && JSON+=',\"review\":\"'$REVIEW'\"'
    JSON+='}'
    
    echo "DEBUG: JSON being sent: $JSON"
    curl -s -X POST "$BASE_URL/books" -H 'Content-Type: application/json' -d "$JSON" | pretty || true
    ;;

  get)
    # Usage: ./dev get <BOOK_ID>
    if [[ $# -lt 2 ]]; then
      echo "Usage: ./dev get <BOOK_ID>"
      exit 2
    fi
    curl -s "$BASE_URL/books/$2" | pretty
    ;;

  delete)
    # Usage: ./dev delete <BOOK_ID>
    if [[ $# -lt 2 ]]; then
      echo "Usage: ./dev delete <BOOK_ID>"
      exit 2
    fi
    code=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "$BASE_URL/books/$2")
    if [[ "$code" == "204" ]]; then
      echo '{"status":"deleted"}' | pretty
    else
      curl -s "$BASE_URL/books/$2" | pretty
      echo "HTTP $code"
    fi
    ;;

  open)
    open_browser
    ;;

  help|*)
    cat <<'USAGE'
Usage: ./dev <command>

Commands:
  up        Build & start services, wait for backend & frontend, open browser
  restart   Rebuild & restart, wait for backend & frontend, open browser
  build     Build images only
  down      Stop and remove containers & network
  clean     Stop containers & also remove volumes (Mongo data)
  logs      Follow logs
  ps        Show service status
  ping      GET /ping from backend
  books     GET /books
  create    POST /books
  get       GET /books/<id>
  delete    DELETE /books/<id>
  open      Try to open the frontend URL in your browser

Examples:
  ./dev up
  ./dev down
  ./dev restart
  ./dev ping
  ./dev books
  ./dev create "Help Me" "Matthew Brawders" 2025
  ./dev create "Help Me" "Matthew Brawders" 2025 "Fantasy" "https://img/cover.jpg" "Loved it"
  TITLE="PLEASE PLEASE PLEASE" AUTHOR="Matthew Brawders" YEAR=9999 ./dev create
  ./dev get 68a3fb47a4139dede9c2478b
  ./dev delete 68a3fb47a4139dede9c2478b
USAGE
    ;;
esac